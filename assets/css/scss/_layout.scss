// Global Layout Settings

@use 'layer-styles';
@use 'breakpoints';

// Foundational setups
body {
  display: grid;
  min-height: calc(100vh - (2 * var(--body-margin)));

  // 12 column layout translated into named columns
  // |------------| page / breakout
  // ...|------|... main
  // ...|---|...... left-column
  // ......|---|... right column
  // ...|--|....... left-one-third
  // .......|--|... right-one-third

  grid-template-columns:
    [page-start breakout-start left-breakout-column-start]
    2fr
    [oversized-start left-oversized-start]
    3fr

    [left-oversized-end main-start left-column-start left-two-thirds-start left-one-third-start]
    2fr
    [left-one-third-end right-two-thirds-start]
    1fr

    [left-column-end left-breakout-column-end right-breakout-column-start right-column-start]

    1fr
    [left-two-thirds-end right-one-third-start]
    2fr
    [main-end right-two-thirds-end right-one-third-end right-column-end right-oversized-start]

    3fr
    [oversized-end right-oversized-end]
    2fr
    [page-end right-breakout-column-end breakout-end];

  @media (max-width: #{breakpoints.$desktop-}) {
    grid-template-columns:
    [page-start breakout-start left-breakout-column-start]
    1fr
    [oversized-start left-oversized-start]
    1.5fr

    [main-start left-column-start left-two-thirds-start left-one-third-start]
    2fr
    [left-one-third-end left-oversized-end right-two-thirds-start]
    1fr

    [left-column-end left-breakout-column-end right-breakout-column-start right-column-start]

    1fr
    [left-two-thirds-end right-one-third-start right-oversized-start]
    2fr
    [main-end right-two-thirds-end right-one-third-end right-column-end]

    1.5fr
    [oversized-end right-oversized-end]
    1fr
    [page-end right-breakout-column-end breakout-end];
  }

  @media (max-width: #{breakpoints.$desktop-S-}) {
    grid-template-columns:
    [page-start breakout-start left-breakout-column-start oversized-start left-oversized-start]
    1.5fr

    [main-start left-column-start left-two-thirds-start left-one-third-start]
    3fr
    [left-one-third-end left-oversized-end right-two-thirds-start]
    1fr

    [left-column-end left-breakout-column-end right-breakout-column-start right-column-start]

    1fr
    [left-two-thirds-end right-one-third-start right-oversized-start]
    3fr
    [main-end right-two-thirds-end right-one-third-end right-column-end]

    1.5fr
    [oversized-end right-oversized-end page-end right-breakout-column-end breakout-end];
  }

  @media (max-width: #{breakpoints.$tablet-}) {
    grid-template-columns:
    [page-start breakout-start left-breakout-column-start oversized-start left-oversized-start]
    1fr

    [main-start left-column-start left-two-thirds-start left-one-third-start]
    4fr
    [left-one-third-end left-oversized-end right-two-thirds-start]
    1fr

    [left-column-end left-breakout-column-end right-breakout-column-start right-column-start]

    1fr
    [left-two-thirds-end right-one-third-start right-oversized-start]
    4fr
    [main-end right-two-thirds-end right-one-third-end right-column-end]

    1fr
    [oversized-end right-oversized-end page-end right-breakout-column-end breakout-end];
  }

  @media (max-width: #{breakpoints.$phablet-}) {
    display: block;

    main > * {
      margin-block: var(--grid-replacing-margin);
    }
  }

  gap: var(--margin-section) var(--grid-gap);

  grid-template-rows: [header-start] min-content [header-end content-start] auto [content-end footer-start] min-content [footer-end];
  align-items: start;
}

@mixin transparent-to-the-grid() {
  display: inherit;
  grid-column: page;
  grid-template-columns: subgrid;
}

main {
  @include transparent-to-the-grid();
  grid-row: content;

  gap: var(--line-break) var(--grid-gap);
  &:has(section) {
    gap: var(--margin-section) var(--grid-gap);
  }

  // If NOTHING inside <main> uses the grid, assume its an old or simple page that needs normal block-behavior:
  &:not(:has(.headline-container, .main, .page-opener, .breakout, .hero, .oversized, .thirds-aside-left, .oversized-aside-left, .thirds-aside-right, .oversized-aside-right)) {
    display: block;
    grid-template-columns: unset;
    grid-column: main;
  }
}

footer {
  clear: both;
  grid-column: page;
  grid-row: footer;
  margin-top: var(--grid-replacing-margin-section);
}

// Main Content Area
section {
  @include transparent-to-the-grid();
  gap: var(--line-break) var(--grid-gap);

// !!! --- !!! --- !!! --- !!! --- !!! --- !!! --- !!! ---
  & > div {
    margin-bottom: var(--grid-replacing-margin);
  }

// !!! --- !!! --- !!! --- !!! --- !!! --- !!! --- !!! ---
  &.space-above {
    margin-top: var(--margin-section);
  }
}

// Simple Layouts
.headline-container, .main, .page-opener, .breakout, .hero, .oversized {
  @include transparent-to-the-grid();
}
.headline-container {
  & > h1 {
    margin: calc(var(--margin-section) - var(--line-break)) 0 calc(var(--margin-element) - var(--line-break)) 0;
    &:first-child {
      margin-top: 0;
    }

    grid-column: breakout;
    @media (min-width: #{breakpoints.$desktop-S}) {
      grid-column: oversized;
    }
  }

  & > h2, & > h3 {
    margin: calc(var(--margin-element) - var(--line-break)) 0 0 0;
    &:first-child {
      margin-top: 0;
    }

    grid-column: main;
  }
}
.main, .page-opener {
  & > * {
    grid-column: main;
  }
}
.breakout, .hero {
  & > * {
    grid-column: breakout;
  }
}
.oversized {
  & > * {
    grid-column: oversized;
  }
}

// Complex Layouts
@mixin vertical-order() {
  grid-template-rows:
    [left-content-start right-content-start]
    auto
    [left-content-end right-content-end];
}
@mixin floats-on-small-screens($float) {
  @media (max-width: #{breakpoints.$phablet-}) {
    max-width: 45%;
    box-sizing: border-box;
    float: #{$float};
    @if $float == left {
      margin-right: var(--body-margin);
    } @else {
      margin-left: var(--body-margin);
    }
    margin-bottom: var(--line-break);
  }
}
@mixin left-one-third() {
  grid-column: left-one-third;
  grid-row: left-content;
  @include floats-on-small-screens(left);
}
@mixin left-oversized() {
  grid-column: left-oversized;
  grid-row: left-content;
  @include floats-on-small-screens(left);
}
@mixin right-one-third() {
  grid-column: right-one-third;
  grid-row: right-content;
  @include floats-on-small-screens(right);
}
@mixin right-oversized() {
  grid-column: right-oversized;
  grid-row: right-content;
  @include floats-on-small-screens(right);
}
@mixin left-two-thirds() {
  grid-column: left-two-thirds;
  grid-row: left-content;
}
@mixin right-two-thirds() {
  grid-column: right-two-thirds;
  grid-row: right-content;
}

.thirds-aside-left, .oversized-aside-left, .thirds-aside-right, .oversized-aside-right {
  @include transparent-to-the-grid();
  @include vertical-order();

  aside {
    height: fit-content;
  }
}
.thirds-aside-left {
  aside {
    @include left-one-third();
  }
  div {
    @include right-two-thirds();
  }
}
.oversized-aside-left {
  aside {
    @include left-oversized();
  }
  div {
    @include right-two-thirds();

    @media (min-width: #{breakpoints.$desktop}) {
      grid-column: main;
    }
  }
}
.thirds-aside-right {
  aside {
    @include right-one-third();
  }
  div {
    @include left-two-thirds();
  }
}
.oversized-aside-right {
  aside {
    @include right-oversized();
  }
  div {
    @include left-two-thirds();

    @media (min-width: #{breakpoints.$desktop}) {
      grid-column: main;
    }
  }
}

// Symmetric Columns
@mixin columns($count: false) {
  @media (min-width: #{breakpoints.$phablet}){
    display: grid;
    @if $count == false {
      grid-template-columns: repeat(auto-fit, minmax(#{breakpoints.$phone}, #{breakpoints.$phablet}));
    } @else {
      grid-template-columns: repeat(#{$count}, 1fr);
    }
    gap: var(--margin-element) var(--grid-gap);
  }

  & > * {
    margin-bottom: var(--grid-replacing-row-gap);
  }
}
.two-columns {
  @include columns(2);
}
.auto-columns {
  @include columns();
}

// Visually highlighted
.floating-illustration {
  grid-column: page;

  background-color: var(--color-visual-grouping);
  padding: var(--grid-gap);
  box-sizing: border-box;
  text-align: center;
  border-radius: var(--border-radius-default);

  &.main, &.oversized {
    display: grid;
    grid-template-columns: subgrid;

    @media (max-width: #{breakpoints.$phablet-}) {
      display: block;
    }
  }
  &.main {
    picture, img {
      grid-column: main;
    }
  }
  &.oversized {
    picture, img {
      grid-column: oversized;
    }
  }
}

// General purpose overrides
.ceil {
  height: fit-content;
  align-self: start;
}

.vertical-middle {
  height: fit-content;
  align-self: center;
}

.floor {
  height: fit-content;
  align-self: end;
  margin-top: auto;
}
.cover {
  object-fit: cover;
}

// Media Elements
picture {
  &.breakout, &.floating-illustration {
    img {
      margin-block-end: calc(var(--margin-section) - var(--margin-element) + var(--grid-replacing-margin));
    }
  }
}

img, figure, video {
  border-radius: var(--border-radius-default);
  margin: var(--line-break) 0 var(--line-break) 0;
  &:first-child {
    margin-top: 0;
  }
  &:last-child {
    margin-bottom: 0;
  }
  box-sizing: border-box;

  * {
    max-width: 100%;
  }
}

img, figure, video, audio {
  margin: 0;
  padding: 0;
}

img, video, audio {
  width: 100%;
  height: auto;
  max-height: 70vh;
  object-fit: contain;
}

// Specialized Elements
.flex {
  display: flex;
  gap: var(--grid-gap);

  & > * {
    display: block;
  }

  &.thirds > * {
    flex-basis: 33.3%;
  }
  &.half > * {
    flex-basis: 50%;
  }
}

.visually-grouped-block {
  @include layer-styles.resize-handles;

  //Spacing and shape of children
  --visually-grouped-block-padding: var(--grid-gap);
  @media (max-width: #{breakpoints.$phablet-}) {
    --visually-grouped-block-padding: calc(var(--grid-gap) / 2);
  }
  padding: var(--visually-grouped-block-padding);

  figure {
    margin:
      calc(-1 * var(--visually-grouped-block-padding))
      calc(-1 * var(--visually-grouped-block-padding))
      var(--visually-grouped-block-padding)
      calc(-1 * var(--visually-grouped-block-padding));
  }
  figure:first-child {
    &, & img {
      border-radius: 0;
    }
  }

}
