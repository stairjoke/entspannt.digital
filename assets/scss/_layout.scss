@use 'scss-variables';
@use 'typography';

// Layout definitions for <main class=default>
main.default {
  // The desktop design was tailored to 1728px wide (16" MacBook Pro), it had
  // 12 columns with a 48px (3rem) gutter (16px/1rem on mobile), the central
  // six are used to anything that is not an illustration. The central six
  // columns are 49.5rem wide at 1rem=16px.

  // The mobile layout technically has columns, but it uses only all four at
  // the same time.

  section, h2, p {
    max-width: 49.5rem;
    margin-left: auto;
    margin-right: auto;
  }

  section {
    // Stacked sections space correctly
    margin-top: var(--spacer-line-break);
    margin-bottom: var(--spacer-full);

    // Sections containing an aside use flex to layout top to bottom on mobile
    // and left to right on desktop
    &:has(aside) {
      display: flex;
      flex-direction: column;

      // By default section children stop to the top of the section, but some
      // layouts call for a vertically-centered layout
      &.vertical-center {
        align-items: center;
      }

      // The main div uses the order: 1 instead of 0 to allow other elements to
      // push themselves above/left of it
      &>div {
        order: 1;
      }
    }

    // On sizes between phablet and tablet the flex is disabled and the aside
    // floats to the right.
    @media (min-width: #{scss-variables.$break-point-phablet}) and (max-width: #{scss-variables.$break-point-tablet-}){
      &:has(aside) {
        display: block;
      }
    }

    // On sizes from tablet and larger the flex direction is left to right,
    // instead of top-down
    @media (min-width: #{scss-variables.$break-point-tablet}){
      &:has(aside) {
        flex-direction: row;
        column-gap: var(--grid-gap, 500px);
      }

      // Sections flagged as "two columns" use a grid to lay out their
      // children. This will not work correctly for text.
      &.two-columns {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-auto-flow: row;
        gap: var(--grid-gap);
      }
    }
  }

  // The aside, by default, stacks above the div.main (which uses order: 1)
  aside {
    margin: 0 0 var(--spacer-full) 0;
    order: 0;

    // Asides flagged as .floor position themselves at the bottom of the
    // containing section. They stack themselves last (order: 2 instead of 0).
    &.floor {
      align-self: flex-end;
      order: 2;
      margin: var(--spacer-line-break) 0 0 0;
    }

    // On phablet until tablet sizes, the aside floats to the right and
    // limits its own size to 50%. It adds a margin to itself to separate
    // from the rest of the content
    @media (min-width: #{scss-variables.$break-point-phablet}) and (max-width: #{scss-variables.$break-point-tablet-}){
      float: right;
      margin: 0 0 var(--spacer-full) var(--grid-gap) !important;
      width: calc(50% - (var(--grid-gap) / 2));
    }

    // On sizes tablet and larger, the aside limits its width to 33% and
    // removes all margins. The spaces are set using gap. It places itself
    // at the end of the stack.
    @media (min-width: #{scss-variables.$break-point-tablet}){
      order: 2;
      &.left {
        // Asides flagged to be on the left will stack themselves first
        order: 0;
      }
      margin: 0;
      flex-basis: 33.33%;
    }

    //The aside sizes itself to be as big as its content including paddings.
    // It does not grow or shrink below/above 33%.
    box-sizing: border-box;
    flex-grow: 0;
    flex-shrink: 0;
  }

  .two-columns > div {
    margin-top: 0 !important;
    margin-bottom: 0 !important;

  }

  figure {
    border-radius: var(--border-radius-default);
    margin: var(--spacer-line-break) 0 var(--spacer-full) 0;
    box-sizing: border-box;

    * {
      max-width: 100%;
    }

    &.floating-illustration {
      background-color: var(--color-visual-grouping);
      padding: var(--grid-gap);
      box-sizing: border-box;
      text-align: center;

      img {
        max-width: min(49.5rem, 100%);
        height: auto;
      }
      video {
        max-height: calc(50vw - var(--body-margin));
      }
    }
  }

  .visually-grouped-block {
    background-color: var(--color-visual-grouping, #f0f);
    border-radius: var(--border-radius-default);
    padding: var(--spacer-line-break);
  }

  .visually-grouped-list {
    border-left: solid 2px var(--color-accent, #f0f);
    &.aside {
      border-color: var(--text-color-dimmed);
    }
    padding-left: 1.5rem;
    margin: var(--spacer-full) 0 var(--spacer-line-break, 500px) 0;
    &:first-child {
      margin-top: 0;
    }
  }
}
